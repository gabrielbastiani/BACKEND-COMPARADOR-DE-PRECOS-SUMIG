// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev

model User {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(295)
  slug     String? @db.VarChar(295)
  email    String  @unique @db.VarChar(180)
  password String

  created_at DateTime? @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@map("users")
}

model PasswordRecoveryUser {
  id    String @id @default(uuid())
  email String

  @@map("passwordrecoveryusers")
}

model Category {
  id       String         @id @default(uuid())
  name     String?        @db.VarChar(300)
  slug     String?        @db.VarChar(300)
  nivel    Int?
  parentId String?
  order    Int?
  status   StatusCategory @default(Disponivel)

  productCategory ProductCategory[]

  created_at DateTime? @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@map("categories")
}

enum StatusCategory {
  Disponivel
  Indisponivel
}

model StoreProduct {
  id                 String  @id @default(uuid())
  type_product       String?
  slug_type          String?
  store              String?
  slug               String?
  link_search        String?
  image              String?
  title_product      String?
  slug_title_product String?
  price              Float?
  brand              String?
  link               String?
  register           String? @default("Nao")

  productCategory ProductCategory[]

  created_at DateTime? @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@map("storeproducts")
}

model TitleAlternative {
  id                     String  @id @default(uuid())
  slug_title_product     String
  title_alternative      String?
  slug_title_alternative String?

  created_at DateTime? @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@map("titlesalternatives")
}

model ProductCategory {
  id                 String       @id @default(uuid())
  storeProduct       StoreProduct @relation(fields: [storeProduct_id], references: [id])
  storeProduct_id    String
  category           Category     @relation(fields: [category_id], references: [id])
  category_id        String
  parentId           String?
  name               String?
  slug               String?
  order              Int?
  store              String?
  slug_title_product String?

  created_at DateTime? @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@map("productcategories")
}

enum StatusProductCategory {
  Disponivel
  Indisponivel
}
